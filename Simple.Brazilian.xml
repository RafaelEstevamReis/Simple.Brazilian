<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simple.Brazilian</name>
    </assembly>
    <members>
        <member name="T:Simple.Brazilian.Documents.CEP">
            <summary>
            Validador de CEP
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Documents.CEP.IsValid(System.String)">
            <summary>
            Verifica se o CEP tem o comprimento correto
            </summary>
            <param name="cep">CEP a ser verificado</param>
            <returns>True se o CEP tem o comprimento correto; False senão</returns>
        </member>
        <member name="M:Simple.Brazilian.Documents.CEP.IsValid(System.String,Simple.Brazilian.Information.Places.UFs)">
            <summary>
            Verifica se o CEP tem o comprimento correto e se corresponde ao UF designado
            </summary>
            <param name="cep">CEP a ser verificado</param>
            <param name="uf">UF a ser comparado</param>
            <returns>True se o CEP tem o comprimento correto; False senão</returns>
        </member>
        <member name="M:Simple.Brazilian.Documents.CEP.Mask(System.String)">
            <summary>
            Aplica a máscara de CEP __.___-___
            </summary>
            <param name="cep">Texto para aplicar a máscara</param>
            <returns>Texto com a máscara</returns>
        </member>
        <member name="M:Simple.Brazilian.Documents.CEP.Unmask(System.String)">
            <summary>
            Remove a máscara
            </summary>
            <param name="cep">Texto com a máscara aplicada</param>
            <returns>Texto com a máscara removida</returns>
        </member>
        <member name="T:Simple.Brazilian.Documents.CNPJ">
            <summary>
            Validador de CNPJ
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Documents.CNPJ.IsValid(System.String)">
            <summary>
            Executa a validação de um CNPJ
            com ou sem máscara
            </summary>
            <param name="cnpj">CNPJ a ser verificado</param>
            <returns>True se o CNPJ é válido de acordo com o cálculo do Dígito Verificador;
            False senão</returns>
        </member>
        <member name="M:Simple.Brazilian.Documents.CNPJ.CompleteWithDigitsCNPJ(System.String)">
            <summary>
            Completa um CNPJ que esteja sem os dígitos verificadores
            </summary>
            <param name="partialCNPJ">CNPJ parcial com 12 dígitos a ser completado</param>
            <returns>CPF válido</returns>
            <exception cref="T:System.ArgumentNullException">Parâmetro não deve ser NULL</exception>
            <exception cref="T:System.ArgumentException">Parâmetro informado é inválido</exception>
        </member>
        <member name="M:Simple.Brazilian.Documents.CNPJ.Mask(System.String)">
            <summary>
            Aplica a máscara de CNPJ __.___.___/____-__
            </summary>
            <param name="cnpj">Texto para aplicar a máscara</param>
            <returns>Texto com a máscara</returns>
        </member>
        <member name="M:Simple.Brazilian.Documents.CNPJ.Unmask(System.String)">
            <summary>
            Remove a máscara
            </summary>
            <param name="cnpj">Texto com a máscara aplicada</param>
            <returns>Texto com a máscara removida</returns>
        </member>
        <member name="T:Simple.Brazilian.Documents.CPF">
            <summary>
            Validador de CPF
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Documents.CPF.IsValid(System.String)">
            <summary>
            Valida se um CPF é válido
            </summary>
            <param name="cpf">Um CPF com ou sem máscara (ex.: 55487565082 ou 554.875.650-82)</param>
            <returns>True se o CPF for válido, False se não</returns>
        </member>
        <member name="M:Simple.Brazilian.Documents.CPF.CompleteWithDigitsCPF(System.String)">
            <summary>
            Completa um CPF parcial com os dígitos verificadores
            </summary>
            <param name="partialCPF">CPF parcial com 9 dígitos a ser completado</param>
            <returns>CPF válido</returns>
            <exception cref="T:System.ArgumentNullException">Parâmetro não deve ser NULL</exception>
            <exception cref="T:System.ArgumentException">Parâmetro informado é inválido</exception>
        </member>
        <member name="M:Simple.Brazilian.Documents.CPF.Mask(System.String)">
            <summary>
            Aplica a máscara de CPF ___.___.___-__
            </summary>
            <param name="cpf">Texto para aplicar a máscara</param>
            <returns>Texto com a máscara</returns>
        </member>
        <member name="M:Simple.Brazilian.Documents.CPF.Unmask(System.String)">
            <summary>
            Remove a máscara
            </summary>
            <param name="cpf">Texto com a máscara aplicada</param>
            <returns>Texto com a máscara removida</returns>
        </member>
        <member name="T:Simple.Brazilian.Documents.IE">
            <summary>
            Validador de IE
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Documents.IE.IsValid(System.String,Simple.Brazilian.Information.Places.UFs)">
            <summary>
            Verifica se a Inscrição Estuadual é válida para determinado UF
            </summary>
            <param name="ie">Inscrição Estuadual a ser validada</param>
            <param name="uf">Unidade federativa que deve ser utilizada na validação</param>
            <returns>True caso a IE seja válida nesta UF, false se não</returns>
        </member>
        <member name="M:Simple.Brazilian.Documents.IE.Mask(System.String,Simple.Brazilian.Information.Places.UFs)">
            <summary>
            Aplica a máscara de IE
            </summary>
            <param name="ie">Texto para aplicar a máscara</param>
            <param name="uf">Especifica qual UF deve ser usada para aplicar a máscara</param>
            <returns>Texto com a máscara</returns>
        </member>
        <member name="M:Simple.Brazilian.Documents.IE.Unmask(System.String)">
            <summary>
            Remove a máscara
            </summary>
            <param name="cep">Texto com a máscara aplicada</param>
            <returns>Texto com a máscara removida</returns>
        </member>
        <member name="T:Simple.Brazilian.Documents.PIS">
            <summary>
            Validador de PIS
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Documents.PIS.IsValid(System.String)">
            <summary>
            Executa a validação de um PIS
            com ou sem máscara
            </summary>
            <param name="pis">PIS a ser verificado</param>
            <returns>True se o PIS é válido de acordo com o cálculo do Dígito Verificador</returns>
        </member>
        <member name="M:Simple.Brazilian.Documents.PIS.Mask(System.String)">
            <summary>
            Aplica a máscara de PIS ___._____.__._
            </summary>
            <param name="pis">Texto para aplicar a máscara</param>
            <returns>Texto com a máscara</returns>
        </member>
        <member name="M:Simple.Brazilian.Documents.PIS.Unmask(System.String)">
            <summary>
            Remove a máscara
            </summary>
            <param name="pis">Texto com a máscara aplicada</param>
            <returns>Texto com a máscara removida</returns>
        </member>
        <member name="T:Simple.Brazilian.Documents.RG">
            <summary>
            Validador de RG
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Documents.RG.Mask(System.String,Simple.Brazilian.Information.Places.UFs)">
            <summary>
            Aplica a máscara de RG
            </summary>
            <param name="rg">Texto para aplicar a máscara</param>
            <param name="uf"></param>
            <returns>Texto com a máscara</returns>
        </member>
        <member name="M:Simple.Brazilian.Documents.RG.Unmask(System.String)">
            <summary>
            Remove a máscara
            </summary>
            <param name="rg">Texto com a máscara aplicada</param>
            <returns>Texto com a máscara removida</returns>
        </member>
        <member name="T:Simple.Brazilian.Documents.Telefone">
            <summary>
            Formtador de Telefone
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Documents.Telefone.Mask(System.String)">
            <summary>
            Aplica a máscara de Telefone
            </summary>
            <param name="telefone">Texto para aplicar a máscara</param>
            <returns>Texto com a máscara</returns>
        </member>
        <member name="M:Simple.Brazilian.Documents.Telefone.Unmask(System.String)">
            <summary>
            Remove a máscara
            </summary>
            <param name="telefone">Texto com a máscara aplicada</param>
            <returns>Texto com a máscara removida</returns>
        </member>
        <member name="T:Simple.Brazilian.ArrayExtensions">
            <summary>
            Extensão interna para Arrays
            </summary>
        </member>
        <member name="M:Simple.Brazilian.ArrayExtensions.IndexOf(System.String[],System.String,System.StringComparison)">
            <summary>
            Localiza índice do Array
            </summary>
        </member>
        <member name="M:Simple.Brazilian.ArrayExtensions.IndexOf``1(``0[],``0)">
            <summary>
            Localiza índice do Array
            </summary>
        </member>
        <member name="T:Simple.Brazilian.MoneyExtensions">
            <summary>
            Extensões para valores monetários
            </summary>
        </member>
        <member name="M:Simple.Brazilian.MoneyExtensions.ToBRL(System.Decimal,System.Int32)">
            <summary>
            Converte número em texto monetário usando Formatters.Numbers.ToBRL com casas decimais especificadas
            </summary>
            <param name="value">Valor a ser convertido</param>
            <param name="decimals">Casas decimais</param>
            <returns>Texto convertido</returns>
        </member>
        <member name="T:Simple.Brazilian.Formatters.Numbers">
            <summary>
            Formata números
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Formatters.Numbers.DefaultCulture">
            <summary>
            CultureInfo padrão a ser utilizado
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Numbers.ToInt(System.String,System.Nullable{System.Int32})">
            <summary>
            Parseia um texto para Int32
            </summary>
            <param name="text">Texto a ser convertido</param>
            <param name="OnError">Valor a ser retornado em caso de falha</param>
            <returns>Número convertido, ou valor padrão</returns>
            <exception cref="T:System.FormatException">Lança FormatException caso não seja possível a conversão e OnError seja NULL</exception>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Numbers.ToDouble(System.String,System.Nullable{System.Double})">
            <summary>
            Parseia um texto para Double
            </summary>
            <param name="text">Texto a ser convertido</param>
            <param name="OnError">Valor a ser retornado em caso de falha</param>
            <returns>Número convertido, ou valor padrão</returns>
            <exception cref="T:System.FormatException">Lança FormatException caso não seja possível a conversão e OnError seja NULL</exception>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Numbers.ToDecimal(System.String,System.Nullable{System.Decimal})">
            <summary>
            Parseia um texto para Decimal
            </summary>
            <param name="text">Texto a ser convertido</param>
            <param name="OnError">Valor a ser retornado em caso de falha</param>
            <returns>Número convertido, ou valor padrão</returns>
            <exception cref="T:System.FormatException">Lança FormatException caso não seja possível a conversão e OnError seja NULL</exception>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Numbers.ToText(System.Int32)">
            <summary>
            Converte número em texto usando DefaultCulture
            </summary>
            <param name="value">Valor a ser convertido</param>
            <returns>Texto convertido</returns>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Numbers.ToText(System.Double,System.Int32)">
            <summary>
            Converte número em texto usando DefaultCulture com a quantidade definida de casas decimais
            </summary>
            <param name="value">Valor a ser convertido</param>
            <param name="decimals">Casas decimais</param>
            <returns>Texto convertido</returns>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Numbers.ToText(System.Decimal,System.Int32)">
            <summary>
            Converte número em texto usando DefaultCulture com a quantidade definida de casas decimais
            </summary>
            <param name="value">Valor a ser convertido</param>
            <param name="decimals">Casas decimais</param>
            <returns>Texto convertido</returns>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Numbers.ToBRL(System.Decimal,System.Int32)">
            <summary>
            Converte número em texto monetário usando DefaultCulture com a quantidade definida de casas decimais
            </summary>
            <param name="value">Valor a ser convertido</param>
            <param name="decimals">Casas decimais</param>
            <returns>Texto convertido</returns>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Numbers.ConvertFromUnkown(System.String,System.Nullable{System.Decimal})">
            <summary>
            Faz conversão tentando ser tolerante à qualquer cultura
            </summary>
            <param name="text">Texto a ser convertido</param>
            <param name="OnError">Valor a ser retornado em caso de falha</param>
            <returns>Número convertido, ou valor padrão</returns>
            <exception cref="T:System.FormatException">Lança FormatException caso não seja possível a conversão e OnError seja NULL</exception>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Numbers.RoundABNT(System.Decimal,System.Int32)">
            <summary>
            Arredonda o valor utilizando a ABNT
            </summary>
            <param name="value">Valor a ser arredondado</param>
            <param name="decimals">Quantidade de casas decimais</param>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Numbers.RoundABNT(System.Double,System.Int32)">
            <summary>
            Arredonda o valor utilizando a ABNT
            </summary>
            <param name="value">Valor a ser arredondado</param>
            <param name="decimals">Quantidade de casas decimais</param>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Numbers.MoedaExtenso(System.Decimal)">
            <summary>
            Escreve número monetário por extenso
            </summary>
            <exception cref="T:System.NotSupportedException">Valores negativos não são suportados</exception>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Numbers.NumeroExtenso(System.UInt64)">
            <summary>
            Escreve número inteiro por extenso
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Pluralizer.DivisaoSilabica(System.String)">
            <summary>
            Algoritmo de divisão silábica
            Usa o paper `Divisão Silábica Automática do Texto Escrito e Falado` do
            CEFAT por Paulo Duarte Ferreira Gouveia, João Paulo Ramos Teixeira, e Diamantino Rui da Silva Freitas
            </summary>
            <param name="pal"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Simple.Brazilian.Formatters.Text">
            <summary>
            Formatadores textuais
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Text.RemoveAccents(System.String,Simple.Brazilian.Formatters.TextOptions)">
            <summary>
            Torna o texto compatível com ASCII sem acentuação. 
            Letras acentuadas serão convertidas e outros caracteres serão descartados
            </summary>
            <param name="texto">Texto a ser processado</param>
            <param name="opcoes">Opções de remoção</param>
            <returns>Retorno sem acentos</returns>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Text.ApplyMask(System.String,System.String)">
            <summary>
            Aplica uma máscara no texto
            </summary>
            <param name="texto">Texto base para aplicar a máscara</param>
            <param name="mascara">Máscara a ser usada. O caracter underline '_' será trocado pelo texto, demais caracteres serão mantidos</param>
            <returns>Texto com a máscara aplicada</returns>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Text.RemoveMask(System.String)">
            <summary>
            Remove todos os caracteres, exceto letras e números
            </summary>
            <param name="texto">Texto a ser limpo</param>
            <returns>Texto desformatado</returns>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Text.RemoveUnnecessarySpaces(System.String)">
            <summary>
            Remove todos os espaços desnecessários.
            Espaços no início e no fim da string, espaços que aparecem mais de uma vez na cadeia e espaços no início e fim de cada linha (caso haja quebra).
            </summary>
            <param name="text">Texto a ser limpo</param>
            <returns>O texto com os espaços tratados</returns>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Text.TruncateText(System.String,System.Int32)">
            <summary>
            Retorna o texto com comprimento até o limite
            </summary>
            <param name="text">Texto a ser limitado</param>
            <param name="maxLen">Comprimento a ser utilizado</param>
            <returns>Texto até o limite de comprimento definido</returns>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Text.Filter(System.String,System.String)">
            <summary>
            Retorna o texto removendo todos os caracteres não permitidos
            </summary>
            <param name="text">Texto a ser avaliado</param>
            <param name="allowed">Caracteres permitidos</param>
            <returns>Texto contendo apenas caracteres permitidos</returns>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Text.Filter(System.String,System.Char[])">
            <summary>
            Retorna o texto removendo todos os caracteres não permitidos
            </summary>
            <param name="text">Texto a ser avaliado</param>
            <param name="allowed">Caracteres permitidos</param>
            <returns>Texto contendo apenas caracteres permitidos</returns>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Text.Filter(System.String,System.Collections.Generic.HashSet{System.Char})">
            <summary>
            Retorna o texto removendo todos os caracteres não permitidos
            </summary>
            <param name="text">Texto a ser avaliado</param>
            <param name="allowed">Caracteres permitidos</param>
            <returns>Texto contendo apenas caracteres permitidos</returns>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Text.ContainsAny(System.String,Simple.Brazilian.Formatters.Text.CharacterType)">
            <summary>
            Verifica se o texto contém qualquer caracter do tipo escolhido
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Text.ContainsOnly(System.String,Simple.Brazilian.Formatters.Text.CharacterType)">
            <summary>
            Verifica se o texto contém apenas caracteres do tipo escolhido
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.Text.EqualsText(System.String,System.String)">
            <summary>
             Verifica se as strings são iguais ignorando acentos e utilizando InvariantCultureIgnoreCase
             NETSTANDARD1_0 utilizará .ToLower() antes da comparação
            </summary>
        </member>
        <member name="T:Simple.Brazilian.Formatters.TextFilter">
            <summary>
            Executa filtragem de textos
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Formatters.TextFilter.AllowsNumbers">
            <summary>
            Define se números são permitidos durante a filtragem
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Formatters.TextFilter.AllowsUppercaseLetters">
            <summary>
            Define se letras maiúsculas são permitidas durante a filtragem
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Formatters.TextFilter.AllowsLowercaseLetters">
            <summary>
            Define se letras minúsculas são permitidas durante a filtragem
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Formatters.TextFilter.AllowsSymbols">
            <summary>
            Define se símbolos são permitidos durante a filtragem
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Formatters.TextFilter.AllowsPunctuation">
            <summary>
            Define se pontuações são permitidas durante a filtragem
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Formatters.TextFilter.AllowsWhitespace">
            <summary>
            Define se espaços e whitespaces são permitidos durante a filtragem
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.DenyAll">
            <summary>
            Remove todos os caracteres
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.AllowAll">
            <summary>
            Permite todos os caracteres
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.AllowNumbers">
            <summary>
            Permite números
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.AllowUppercaseLetters">
            <summary>
            Permite maiúsculas
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.AllowLowercaseLetters">
            <summary>
            Permite minúsculas
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.AllowSymbols">
            <summary>
            Permite símbolos
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.AllowPunctuation">
            <summary>
            Permite pontuações
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.AllowWhitespace">
            <summary>
            Permite espaços e whitespaces
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.DenyNumbers">
            <summary>
            Remove números
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.DenyUppercaseLetters">
            <summary>
            Remove maiúsculas
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.DenyLowercaseLetters">
            <summary>
            Remove minúsculas
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.DenyLetters">
            <summary>
            Remove letras
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.DenySymbols">
            <summary>
            Remove símbolos
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.DenyPunctuation">
            <summary>
            Remove pontuações
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.DenyWhitespace">
            <summary>
            Remove espaços e whitespaces
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.Execute">
            <summary>
            Executa filtro
            </summary>
            <returns>Retorna texto com filtros aplicados</returns>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilter.Filter(System.String)">
            <summary>
            Inicializa filtro de texto
            </summary>
        </member>
        <member name="T:Simple.Brazilian.Formatters.TextFilterExtension">
            <summary>
            Extensão de filtro de texto
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Formatters.TextFilterExtension.Filter(System.String)">
            <summary>
            Executa filtragem de textos
            </summary>
            <param name="text">Texto a ser filtrado</param>
            <returns>Chaining de filtragem de texto</returns>
        </member>
        <member name="T:Simple.Brazilian.Formatters.TextOptions">
            <summary>
            Opções de texto
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Formatters.TextOptions.Padrao">
            <summary>
            Valor padrão para ser utilizado quando nenhuma opção é definida
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Formatters.TextOptions.CaracterPadraoSubstituicao">
            <summary>
            Especifica o caractere que deverá ser utilizado para a substituição
            </summary>
        </member>
        <member name="T:Simple.Brazilian.Information.Dates">
            <summary>
            Informações sobre datas
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Dates.MonthsWithAccent">
            <summary>
            Lista de Months com a iniciaLowermaiúscula, com acentos
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Dates.MonthsWithoutAccent">
            <summary>
            Lista de Months com a iniciaLowermaiúscula, sem acentos
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Dates.WeekDayWithAccent">
            <summary>
            Lista de dias da semana com a iniciaLowermaiúscula, com acentos
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Dates.WeekDayWithoutAccent">
            <summary>
            Lista de dias da semana com a iniciaLowermaiúscula, sem acentos
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Dates.MonthsWithAccentUpper">
            <summary>
            Lista de Months em maiúsculo, com acentos
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Dates.MonthsWithoutAccentUpper">
            <summary>
            Lista de Months em maiúsculo, sem acentos
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Dates.WeekDayWithAccentUpper">
            <summary>
            Lista de dias da semana em maiúsculo, com acentos
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Dates.WeekDayWithoutAccentUpper">
            <summary>
            Lista de dias da semana em maiúsculo, sem acentos
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Dates.MonthsWithAccentLower">
            <summary>
            Lista de Months em minúsculo, com acentos
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Dates.MonthsWithoutAccentLower">
            <summary>
            Lista de Months em minúsculo, sem acentos
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Dates.WeekDayWithAccentLower">
            <summary>
            Lista de dias da semana em minúsculo, com acentos
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Dates.WeekDayWithoutAccentLower">
            <summary>
            Lista de dias da semana em minúsculo, sem acentos
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Information.Dates.IsNationalHoliday(System.DateTime,System.String@)">
            <summary>
            Retorna feriados civís nacionais
            Segundo as leis 10.607/2002 e 6.802/1980
            </summary>
            <param name="date">Data a ser validada</param>
            <param name="name">Nome do feriado</param>
            <returns>True, se é feriado ou False, se não</returns>
        </member>
        <member name="T:Simple.Brazilian.Information.Models.PIX_Payload">
            <summary>
            Dados do Payload do Pix
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Models.PIX_Payload.UniquePayment">
            <summary>
            Identifica se o pagamento pode ser reaproveitado
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Models.PIX_Payload.MerchantChavePix">
            <summary>
            Chave pix
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Models.PIX_Payload.MerchantCartoes">
            <summary>
            Merchant Account Information – Cartões
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Models.PIX_Payload.MerchantOutro">
            <summary>
            Merchant Account Information - Outro
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Models.PIX_Payload.Amount">
            <summary>
            Valor da transação
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Models.PIX_Payload.MerchantName">
            <summary>
            Nome do titular da conta/Lojista
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Models.PIX_Payload.MerchantCity">
            <summary>
            Cidade do titular da conta/Lojista
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Models.PIX_Payload.MerchantPostalCode">
            <summary>
            CEP do titular da conta/Lojista
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Models.PIX_Payload.ReferenceLabel">
            <summary>
            Texto de Referencia/Id Transacao
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Models.PIX_Payload.InformacaoArbitraria">
            <summary>
            Informação Arbitrária
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Information.Models.PIX_Payload.PayloadMinimo(System.String,System.String,System.String)">
            <summary>
            Monta Payload mínimo
            </summary>
            <param name="chavePix">Chave Pix</param>
            <param name="nomeMerchant">Nome do titular da conta</param>
            <param name="cidadeMerchant">Cidade do titular da conta</param>
            <returns>Payload com os dados</returns>
        </member>
        <member name="T:Simple.Brazilian.Information.PIX">
            <summary>
            Implementa gerador de BRCode para PIX
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Information.PIX.GerarQR_Estatico(Simple.Brazilian.Information.Models.PIX_Payload)">
            <summary>
            Monta texto do BRCode para geração de QR Code estático
            </summary>
            <param name="payload">Dados do pagamento</param>
            <returns>Texto do BRCode</returns>
        </member>
        <member name="T:Simple.Brazilian.Information.Places.CityInfo">
            <summary>
            Dados sobre a cidade
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Places.CityInfo.IdState">
            <summary>
            Código IBGE do estado
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Places.CityInfo.IdCity">
            <summary>
            Código IBGE da cidade
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Places.CityInfo.Name">
            <summary>
            Nome da Cidade
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Places.CityInfo.CompleteId">
            <summary>
            Código completo da cidade no IBGE
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Information.Places.CityInfo.ToString">
            <summary>
            Representação textual da cidade
            </summary>
        </member>
        <member name="T:Simple.Brazilian.Information.Places.StateInfo">
            <summary>
            Informções sobre estados (UFs)
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Places.StateInfo.Name">
            <summary>
            Nome do estado
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Places.StateInfo.UF">
            <summary>
            Sigla do estado
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Places.StateInfo.IdIBGE">
            <summary>
            Código do estado no IBGE
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Places.StateInfo.Capital">
            <summary>
            Capital administrativa do estado
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Places.StateInfo.AreaKm2">
            <summary>
            Área do estado em Km²
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Places.StateInfo.CityInfo">
            <summary>
            Informações sobre as cidades do estado
            </summary>
        </member>
        <member name="T:Simple.Brazilian.Information.Places.States">
            <summary>
            Informações sobre estados
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.States.UF">
            <summary>
            Lista de siglas de UFs em ordem alfabética 
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.States.Names">
            <summary>
            Lista de nomes de UFs em ordem alfabética de UF
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.States.IdIBGE">
            <summary>
            Lista de códigos do IBGE das UFs em ordem alfabética de UF
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.States.Capital">
            <summary>
            Lista de capitais dos UFs em ordem alfabética de UF
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.States.AreaKm2">
            <summary>
            Lista de área dos UFs em ordem alfabética de UF
            </summary>
        </member>
        <member name="P:Simple.Brazilian.Information.Places.States.CityInfo">
            <summary>
            Obtém uma lista com todos os municípios, seus nomes e códigos IBGE
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Information.Places.States.GetStateInfoByUF(System.String)">
            <summary>
            Obtém um objeto "StateInfo"
            </summary>
            <param name="uf">Sigla da UF</param>
        </member>
        <member name="M:Simple.Brazilian.Information.Places.States.GetStateInfoByName(System.String)">
            <summary>
            Obtém um objeto "StateInfo"
            </summary>
            <param name="name">Nome da UF (com acentos)</param>
        </member>
        <member name="M:Simple.Brazilian.Information.Places.States.GetStateInfoByName(System.Int32)">
            <summary>
            Obtém um objeto "StateInfo"
            </summary>
            <param name="id">Id do IBGE</param>
        </member>
        <member name="M:Simple.Brazilian.Information.Places.States.GetStateInfo(Simple.Brazilian.Information.Places.UFs)">
            <summary>
            Obtém um objeto "StateInfo"
            </summary>
            <param name="uf">Item do enum UFs</param>
        </member>
        <member name="T:Simple.Brazilian.Information.Places.UFs">
            <summary>
            Unidades federativas
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.RO">
            <summary>
            Rondônia
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.AC">
            <summary>
            Acre
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.AM">
            <summary>
            Amazonas
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.RR">
            <summary>
            Roraima
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.PA">
            <summary>
            Pará
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.AP">
            <summary>
            Amapá
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.TO">
            <summary>
            Tocantins
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.MA">
            <summary>
            Maranhão
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.PI">
            <summary>
            Piauí
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.CE">
            <summary>
            Ceará
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.RN">
            <summary>
            Rio Grande do Norte
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.PB">
            <summary>
            Paraíba
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.PE">
            <summary>
            Pernambuco
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.AL">
            <summary>
            Alagoas
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.SE">
            <summary>
            Sergipe
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.BA">
            <summary>
            Bahia
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.MG">
            <summary>
            Minas Gerais
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.ES">
            <summary>
            Espírito Santo
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.RJ">
            <summary>
            Rio de Janeiro
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.SP">
            <summary>
            São Paulo
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.PR">
            <summary>
            Paraná
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.SC">
            <summary>
            Santa Catarina
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.RS">
            <summary>
            Rio Grande do Sul
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.MS">
            <summary>
            Mato Grosso do Sul
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.MT">
            <summary>
            Mato Grosso
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.GO">
            <summary>
            Goiás
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.DF">
            <summary>
            Distrito Federal
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.Places.UFs.EX">
            <summary>
            Exterior
            </summary>
        </member>
        <member name="T:Simple.Brazilian.Information.WorkDay">
            <summary>
            Classe para lidar com dias úteis
            Segundo as leis 10.607/2002 e 6.802/1980
            </summary>
        </member>
        <member name="T:Simple.Brazilian.Information.WorkDay.DayType">
            <summary>
            Tipo de data
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.WorkDay.DayType.NationalHoliday">
            <summary>
            Feriado nacional, ver Dates.IsNationalHoliday
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.WorkDay.DayType.WeekEnd">
            <summary>
            Fim de semana
            </summary>
        </member>
        <member name="F:Simple.Brazilian.Information.WorkDay.DayType.WeekDay">
            <summary>
            Dia de semana
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Information.WorkDay.GetDayType(System.DateTime)">
            <summary>
            Obtém o tipo de dia
            </summary>
            <param name="date">Data base</param>
            <returns>Tipo de data</returns>
        </member>
        <member name="M:Simple.Brazilian.Information.WorkDay.WorkDaysBetween(System.DateTime,System.DateTime)">
            <summary>
            Obtém dias úteis entre as datas
            </summary>
            <param name="start">Data de início, inclusive</param>
            <param name="end">Data de dim, inclusive</param>
            <returns>Dias úteis</returns>
        </member>
        <member name="M:Simple.Brazilian.Information.WorkDay.WorkdayIn(System.DateTime,System.Int32)">
            <summary>
            Retorna o n'ésimo dia útil a partir do início
            </summary>
            <param name="start">Dia 0 da busca</param>
            <param name="days">Número N de dias a serem buscados</param>
            <returns>Data do n'ésimo dia</returns>
        </member>
        <member name="T:Simple.Brazilian.Validators.Bank">
            <summary>
            Validações de dados bancários
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.Bank.IsBankNumberValid(System.String)">
            <summary>
            Validação simples de número do banco (COMPE), sem dígito
            </summary>
            <param name="bankNumber">Número do banco</param>
        </member>
        <member name="M:Simple.Brazilian.Validators.Bank.IsAgencyValid(System.String)">
            <summary>
            Validação simples de número da agência, sem dígito
            </summary>
            <param name="agencyNumber">Número do banco</param>
        </member>
        <member name="M:Simple.Brazilian.Validators.Bank.IsAccountValid(System.String)">
            <summary>
            Validação simples de número da conta, sem dígito
            </summary>
            <param name="accountNumber">Número do banco</param>
        </member>
        <member name="M:Simple.Brazilian.Validators.Bank.IsValid(System.String,System.String,System.String)">
            <summary>
            Validação simples de de dados bancários com digito. 
            Não é feita a checagem do digito verificador.
            </summary>
            <param name="bankNumber">Código do Banco (COMPE)</param>
            <param name="agencyWithDigit">Número da agência</param>
            <param name="accountWithDigit">Número da Conta</param>
        </member>
        <member name="T:Simple.Brazilian.Validators.Boleto">
            <summary>
            Classe para funções de validação de boletos bancários
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.Boleto.CalculateDV_Itau(System.String)">
            <summary>
            Executa o calculo do digito verificador para Linha digitável, 
            Nosso Número, Seu Número e outros que são padrão 2121 Mod 10
            com dígitos individuais
            </summary>
            <returns>int DigitoVerificador</returns>
        </member>
        <member name="M:Simple.Brazilian.Validators.Boleto.CalculateDueDateFactor_Text(System.DateTime)">
            <summary>
            Executa o cálculo do Fator de Vencimento com retorno em texto com 4 dígitos
            </summary>
            <param name="dataVencimento">Data de vencimento do boleto</param>
            <returns>Fator de vencimento com 4 dígitos</returns>
        </member>
        <member name="M:Simple.Brazilian.Validators.Boleto.CalculateDueDateFactor(System.DateTime)">
            <summary>
            Executa o cálculo do Fator de Vencimento
            </summary>
            <param name="dataVencimento">Data de vencimento do boleto</param>
            <returns>Fator de vencimento</returns>
        </member>
        <member name="T:Simple.Brazilian.Validators.CRC16">
            <summary>
            Calcula CRC16 no padrão CRC-16-CCITT-FFFF
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.CRC16.ComputeHexCRC(System.String)">
            <summary>
            Executa cálculo do CRC16 de uma string ASCII
            </summary>
            <param name="text">Texto a ser calculado</param>
            <returns>Resultado em HEXADECIMAL</returns>
        </member>
        <member name="M:Simple.Brazilian.Validators.CRC16.ComputeCRC(System.Byte[])">
            <summary>
            Executa cálculo do CRC16
            </summary>
            <param name="bytes">Dados a serem calculados</param>
            <returns>Resultado do CRC</returns>
        </member>
        <member name="T:Simple.Brazilian.Validators.Dates">
            <summary>
            Classe para validar datas
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.Dates.IsBusinessDay(System.DateTime,System.Boolean)">
            <summary>
            Verifca se uma data é dia útil ou não
            </summary>
            <param name="date">Data a ser validada</param>
            <param name="checkNationalHolydays">Verificar se é feriado nacional</param>
            <returns>True se for dia útil, False se não</returns>
        </member>
        <member name="M:Simple.Brazilian.Validators.Dates.NextBusinessDay(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Retorna o próximo dia útil a partir de uma data base.
            InvalidOperationException: Caso não seja localizada nos 14 dias seguintes à dataBase
            </summary>
            <param name="baseDate">Data a ser verificada</param>
            <param name="checkNationalHolydays">Define se deve considerar feriados nacionais na verificação</param>
            <param name="acceptBaseDate">Define se a dataBase é uma data válida para retorno case seja dia útil</param>
            <returns>Próximo dia útil</returns>
        </member>
        <member name="M:Simple.Brazilian.Validators.Dates.FindNextBusinessDays(System.DateTime,System.Int32,System.Boolean)">
            <summary>
            Encontra o próximo X dia útil a partir de uma data base
            </summary>
            <param name="baseDate">Data base a ser verificada</param>
            <param name="days">Dias úteis a serem contados</param>
            <param name="checkNationalHolydays">Define se deve considerar feriados nacionais na verificação</param>
            <returns>Data após o número `days` de dias úteis</returns>
        </member>
        <member name="T:Simple.Brazilian.Validators.EMail">
            <summary>
            Validação de endereços de e-mail
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.EMail.IsValid(System.String)">
            <summary>
            Valida se o texto é uma e-mail válido
            </summary>
        </member>
        <member name="T:Simple.Brazilian.Validators.ModValidation">
            <summary>
            Validação e dados com "Mod"
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.ModValidation.SumMultiplySequence(System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Retorna a soma da multiplicação de sequencias geradas entre Min e Max
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.ModValidation.SumMultiplySequence(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Retorna a soma da multiplicação de sequencias geradas entre Min e Max
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.ModValidation.CalculateMult10Mod11(System.String,System.Int32,System.Int32)">
            <summary>
            Executa cálculo do Mod11 com multiplicação por 10 no texto, retorna INT
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.ModValidation.CalculateMod11(System.String,System.Int32,System.Int32)">
            <summary>
            Executa cálculo do Mod11 no texto, retorna INT
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.ModValidation.CalculateMult10Mod11Char(System.String,System.Int32,System.Int32)">
            <summary>
            Executa cálculo do Mod11 com multiplicação por 10 no texto, retorna CHAR
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.ModValidation.CalculateMod11Char(System.String,System.Int32,System.Int32)">
            <summary>
            Executa cálculo do Mod11 no texto, retorna CHAR
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.ModValidation.CheckDocumentMod1129(System.String)">
            <summary>
            Executa verificação de documento com Mod11, valores de 9 a 2
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.ModValidation.Calculate2121Mod10IndividualDigits(System.String)">
            <summary>
            Executa cálculo no padrão 2121 em Mod10 no texto, retorna INT
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.ModValidation.Calculate2121Mod10IndividualDigitsChar(System.String)">
            <summary>
            Executa cálculo no padrão 2121 em Mod10 no texto, retorna CHAR
            </summary>
        </member>
        <member name="T:Simple.Brazilian.Validators.Pix">
            <summary>
            Validação de Chaves PIX
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.Pix.IsValid(System.String)">
            <summary>
            Valida se o texto é uma das Chaves PIX válidas
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.Pix.IsValid_CPF(System.String)">
            <summary>
            Valida se o texto é uma Chave PIX de CPF
            Exemplo do Manual PIX: 12345678900 (Atenção, o CPF do manual é inválido)
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.Pix.IsValid_CNPJ(System.String)">
            <summary>
            Valida se o texto é uma Chave PIX de CNPJ
            Exemplo do Manual PIX: 00038166000105
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.Pix.IsValid_Celular(System.String)">
            <summary>
            Valida se o texto é uma Chave PIX de Celular
            Exemplo do Manual PIX: +5561912345678
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.Pix.IsValid_Email(System.String)">
            <summary>
            Valida se o texto é uma Chave PIX de e-mail
            Exemplo do Manual PIX: fulano_da_silva.recebedor@example.com
            </summary>
        </member>
        <member name="M:Simple.Brazilian.Validators.Pix.IsValid_Aleatoria(System.String)">
            <summary>
            Valida se o texto é uma Chave PIX Aleatória. 
            Exemplo do Manual PIX: 123e4567-e12b-12d1-a456-426655440000
            </summary>
        </member>
    </members>
</doc>
